{"version":3,"sources":["../src/client.ts","../src/index.ts"],"sourcesContent":["import { Message, xmtpClient } from \"@xmtp/agent-starter\";\nimport {\n    composeContext,\n    Content,\n    elizaLogger,\n    Memory,\n    ModelClass,\n    stringToUuid,\n    messageCompletionFooter,\n    generateMessageResponse,\n    Client,\n    IAgentRuntime,\n    type Plugin,\n} from \"@elizaos/core\";\n\nexport const messageHandlerTemplate =\n    // {{goals}}\n    `# Action Examples\n{{actionExamples}}\n(Action examples are for reference only. Do not use the information from them in your response.)\n\n# Knowledge\n{{knowledge}}\n\n# Task: Generate dialog and actions for the character {{agentName}}.\nAbout {{agentName}}:\n{{bio}}\n{{lore}}\n\n{{providers}}\n\n{{attachments}}\n\n# Capabilities\nNote that {{agentName}} is capable of reading/seeing/hearing various forms of media, including images, videos, audio, plaintext and PDFs. Recent attachments have been included above under the \"Attachments\" section.\n\n{{messageDirections}}\n\n{{recentMessages}}\n\n{{actions}}\n\n# Instructions: Write the next message for {{agentName}}.\n` + messageCompletionFooter;\n\nexport const XmtpClientInterface: Client = {\n    name: 'xmtp',\n    start: async (elizaRuntime: IAgentRuntime) => {\n        const onMessage = async (message: Message) => {\n            elizaLogger.info(\n                `Decoded message: ${message.content?.text ?? \"no text\"} by ${\n                    message.sender.address\n                }`\n            );\n        \n            try {\n                const text = message?.content?.text ?? \"\";\n                const messageId = stringToUuid(message.id as string);\n                const userId = stringToUuid(message.sender.address as string);\n                const roomId = stringToUuid(message.group.id as string);\n                await elizaRuntime.ensureConnection(\n                    userId,\n                    roomId,\n                    message.sender.address,\n                    message.sender.address,\n                    \"xmtp\"\n                );\n        \n                const content: Content = {\n                    text,\n                    source: \"xmtp\",\n                    inReplyTo: undefined,\n                };\n        \n                const userMessage = {\n                    content,\n                    userId,\n                    roomId,\n                    agentId: elizaRuntime.agentId,\n                };\n        \n                const memory: Memory = {\n                    id: messageId,\n                    agentId: elizaRuntime.agentId,\n                    userId,\n                    roomId,\n                    content,\n                    createdAt: Date.now(),\n                };\n        \n                await elizaRuntime.messageManager.createMemory(memory);\n        \n                const state = await elizaRuntime.composeState(userMessage, {\n                    agentName: elizaRuntime.character.name,\n                });\n        \n                const context = composeContext({\n                    state,\n                    template: messageHandlerTemplate,\n                });\n        \n                const response = await generateMessageResponse({\n                    runtime: elizaRuntime,\n                    context,\n                    modelClass: ModelClass.LARGE,\n                });\n                const _newMessage = [\n                    {\n                        text: response?.text,\n                        source: \"xmtp\",\n                        inReplyTo: messageId,\n                    },\n                ];\n                // save response to memory\n                const responseMessage = {\n                    ...userMessage,\n                    userId: elizaRuntime.agentId,\n                    content: response,\n                };\n        \n                await elizaRuntime.messageManager.createMemory(responseMessage);\n        \n                if (!response) {\n                    elizaLogger.error(\"No response from generateMessageResponse\");\n                    return;\n                }\n        \n                await elizaRuntime.evaluate(memory, state);\n        \n                const _result = await elizaRuntime.processActions(\n                    memory,\n                    [responseMessage],\n                    state,\n                    async (newMessages) => {\n                        if (newMessages.text) {\n                            _newMessage.push({\n                                text: newMessages.text,\n                                source: \"xmtp\",\n                                inReplyTo: undefined,\n                            });\n                        }\n                        return [memory];\n                    }\n                );\n                for (const newMsg of _newMessage) {\n                    await xmtp.send({\n                        message: newMsg.text,\n                        originalMessage: message,\n                        metadata: {},\n                    });\n                }\n            } catch (error) {\n                elizaLogger.error(\"Error in onMessage\", error);\n            }\n        };\n\n        const xmtp = await xmtpClient({\n            walletKey: process.env.EVM_PRIVATE_KEY as string,\n            onMessage,\n        });\n\n        elizaLogger.success(\"âœ… XMTP client started\");\n        elizaLogger.info(`XMTP address: ${xmtp.address}`);\n        elizaLogger.info(`Talk to me on:`);\n        elizaLogger.log(\n            `Converse: https://converse.xyz/dm/${xmtp.address}`\n        );\n        elizaLogger.log(\n            `Coinbase Wallet: https://go.cb-w.com/messaging?address=${xmtp.address}`\n        );\n        elizaLogger.log(\n            `Web or Farcaster Frame: https://client.message-kit.org/?address=${xmtp.address}`\n        );\n\n        return {\n            async stop() {\n                elizaLogger.warn(\"XMTP client does not support stopping yet\");\n            },\n        };\n    },\n\n};","import { XmtpClientInterface } from \"./client\";\n\nconst xmtpPlugin = {\n    name: \"xmtp\",\n    description: \"XMTP client\",\n    clients: [XmtpClientInterface],\n};\nexport default xmtpPlugin;\n"],"mappings":"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","names":[]}